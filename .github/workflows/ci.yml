name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # NOTE: Windows テストを一時的に無効化
        # 理由: Windows CI環境でのテストが不安定なため
        # TODO: Windows環境の安定性が確認され次第再有効化
        # 再有効化時は以下のように修正: os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y lsof

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt --all -- --check

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: kilar
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: kilar
          # NOTE: Windows ビルドを一時的に無効化
          # 理由: Windows CI環境でのテストが不安定なため、ビルドも含めて無効化
          # TODO: Windows環境の安定性が確認され次第再有効化
          # 再有効化時は以下の行のコメントを解除:
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   binary_name: kilar.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: kilar
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: kilar

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
        
    - name: Configure linker for ARM64
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      env:
        # ARM64向けのクロスコンパイル環境変数
        CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
        CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lsof
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: false